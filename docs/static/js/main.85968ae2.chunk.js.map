{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrif.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","handleInputChange","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrif","loading","state","setState","useEffect","then","imgs","useFectGifs","key","GifExpertApp","categories","Fragment","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAwBhD,OACI,oCACI,0BAAMC,SAfO,SAACC,GAGlBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACvCN,EAAc,OAQV,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAAW,SAACP,GAAD,OA1BD,SAAEA,GAGxBF,EAAcE,EAAEQ,OAAOF,OAuBMG,CAAkBT,S,uBC9B1CU,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAQD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAbtB,kBAiBZM,GAjBY,4CAAH,sDCDPO,EAAc,SAAC,GAA0B,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OAFAc,QAAQC,IAAIN,EAAIC,EAAOV,GAGnB,yBAAKgB,UAAU,2CACX,yBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,+BAAMA,EAAN,OCLCS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAZ,SAAEA,GAAc,IAAD,EAEdf,mBAAS,CAC/BsB,KAAK,GACLe,SAAQ,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA4BxC,OArBAC,qBAAU,WAEN1B,EAASC,GACJ0B,MAAK,SAAAC,GAEEH,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,SAK1B,CAAEtB,IASGuB,EDzB2BK,CAAa5B,GAAjCa,EAHuB,EAG5BN,KAAae,EAHe,EAGfA,QAEtB,OACI,oCACI,wBAAIJ,UAAU,qCAAuClB,GAEjDsB,GAAW,uBAAGJ,UAAU,oCAAb,cAEd,yBAAKA,UAAU,aAIJL,EAAOJ,KAAI,SAAEC,GACT,OACI,kBAAC,EAAD,eAEImB,IAAMnB,EAAIC,IACLD,UE2B1BoB,EA9CM,WAAM,MAIa7C,mBAAS,CAAC,cAJvB,mBAIhB8C,EAJgB,KAIJ/C,EAJI,KAqBvB,OAEI,kBAAC,IAAMgD,SAAP,KAEI,4CACA,6BACA,kBAAC,EAAD,CAAahD,cAAgBA,IAE7B,4BAEQ+C,EAAWtB,KAAI,SAAET,GAAF,OACX,kBAAC,EAAD,CACI6B,IAAM7B,EACNA,SAAWA,U,MCjCvCiC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.85968ae2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) =>{\n\n        //cambiamos el valor de InputValue\n        setInputValue(e.target.value);\n\n    }\n\n    const handleSubmit = (e) =>{\n\n        //evitamos que se haga el reinicio de la pagina al presionar el submit o \"Enter \"\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2 ){\n\n            setCategories( cats => [ inputValue,...cats ]);\n            setInputValue('');\n        }\n         \n    }\n\n    return (\n        <>\n            <form onSubmit={ handleSubmit } >\n                <input \n                    type=\"text\"\n                    value={ inputValue }\n                    onChange={ (e)=> handleInputChange(e) }\n                />\n            </form>\n        </>\n    )\n}\nAddCategory.propTypes = {\n    \n    setCategories:PropTypes.func.isRequired,\n     \n}\n","\n\n\nexport const getGifs = async( category ) =>{\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=Qb3BktvNtn5q5Hf23amATODT4QksFJmm`;\n\n    const resp = await fetch( url );\n\n    const { data } = await resp.json();\n\n    const gifs =  data.map(img => {\n\n        return {\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n\n    });\n    return gifs;\n\n}\n","import React from 'react';\n\nexport const GifGridItem = ( { id, title, url } ) => {\n\n    console.log(id, title, url);\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn \">\n            <img src={ url } alt={ title }></img>\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFectGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrif = ({ category }) => {\n\n    // para renombrar data:images\n    const {  data:images, loading } = useFectGifs( category );\n    \n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\" >{ category }</h3>\n            {\n                loading && <p className=\"animate__animated animate__flash\">Loading...</p>\n            }\n             <div className=\"card-grid\">  \n                {/* <h3>{ count } </h3>\n                <button onClick={ ()=> setCount( count+1 ) }></button> */}\n                    {\n                        images.map(( img )=>{\n                            return(\n                                <GifGridItem \n                                \n                                    key={ img.id }\n                                    { ...img }\n                                >\n                                </GifGridItem>\n                            )\n                        })  \n                    } \n\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport  const  useFectGifs = ( category ) =>{\n\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect(()=>{\n\n        getGifs( category )\n            .then(imgs=>{\n\n                    setState({\n                        data:imgs,\n                        loading:false\n    \n                    });\n            });\n\n    },[ category ]);\n\n    // // //Para que no haga peticion cada que se onClick del Button\n    // useEffect( () => {\n    //     getGifs(category).then(setImages  )\n    // },[ category ] );\n\n    \n\n    return state; // { data:[] , loading:true }\n\n}\n\n","import React,{ useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrif } from './components/GifGrif';\n//snipet para crear todo de una rafc \n\nconst GifExpertApp = () => {\n\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () =>{\n       \n    //     //Es una forma de agregar al array nuevos valores\n    //     setCategories( [ ...categories, 'Hunter' ] );\n\n\n    //     //Es una forma de agregar al array nuevos valores pero inversa ahora\n    //     // setCategories( [ 'Hunter' , ...categories ] );\n\n    //     //Otra forma de agregar\n    //     // setCategories( cats => [ ...cats,'Hunter' ]);\n\n    // }\n\n\n    return (\n\n        <React.Fragment>\n\n            <h2>GifExpertApp</h2>\n            <hr />\n            <AddCategory setCategories={ setCategories } ></AddCategory>\n\n            <ol>\n                {\n                    categories.map(( category ) =>  (\n                        <GifGrif \n                            key={ category }\n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n\n\n        </React.Fragment>\n    )\n\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root'),\n);\n\n//GifExpertApp\n//<h2>GifExpertApp</h2>\n//<hr />\n\n"],"sourceRoot":""}